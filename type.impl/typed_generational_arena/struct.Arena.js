(function() {
    var type_impls = Object.fromEntries([["typed_generational_arena",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Arena%3CT,+I,+G%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/typed_generational_arena/lib.rs.html#1073-1156\">Source</a><a href=\"#impl-Arena%3CT,+I,+G%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, I: <a class=\"trait\" href=\"typed_generational_arena/trait.ArenaIndex.html\" title=\"trait typed_generational_arena::ArenaIndex\">ArenaIndex</a>, G: <a class=\"trait\" href=\"typed_generational_arena/trait.GenerationalIndex.html\" title=\"trait typed_generational_arena::GenerationalIndex\">GenerationalIndex</a>&gt; <a class=\"struct\" href=\"typed_generational_arena/struct.Arena.html\" title=\"struct typed_generational_arena::Arena\">Arena</a>&lt;T, I, G&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.remove\" class=\"method\"><a class=\"src rightside\" href=\"src/typed_generational_arena/lib.rs.html#1090-1118\">Source</a><h4 class=\"code-header\">pub fn <a href=\"typed_generational_arena/struct.Arena.html#tymethod.remove\" class=\"fn\">remove</a>(&amp;mut self, i: <a class=\"struct\" href=\"typed_generational_arena/struct.Index.html\" title=\"struct typed_generational_arena::Index\">Index</a>&lt;T, I, G&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Remove the element at index <code>i</code> from the arena.</p>\n<p>If the element at index <code>i</code> is still in the arena, then it is\nreturned. If it is not in the arena, then <code>None</code> is returned.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>typed_generational_arena::StandardArena;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>arena = StandardArena::new();\n<span class=\"kw\">let </span>idx = arena.insert(<span class=\"number\">42</span>);\n\n<span class=\"macro\">assert_eq!</span>(arena.remove(idx), <span class=\"prelude-val\">Some</span>(<span class=\"number\">42</span>));\n<span class=\"macro\">assert_eq!</span>(arena.remove(idx), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.retain\" class=\"method\"><a class=\"src rightside\" href=\"src/typed_generational_arena/lib.rs.html#1138-1155\">Source</a><h4 class=\"code-header\">pub fn <a href=\"typed_generational_arena/struct.Arena.html#tymethod.retain\" class=\"fn\">retain</a>(&amp;mut self, predicate: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"struct\" href=\"typed_generational_arena/struct.Index.html\" title=\"struct typed_generational_arena::Index\">Index</a>&lt;T, I, G&gt;, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Retains only the elements specified by the predicate.</p>\n<p>In other words, remove all indices such that <code>predicate(index, &amp;value)</code> returns <code>false</code>.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>typed_generational_arena::StandardArena;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>crew = StandardArena::new();\ncrew.extend(<span class=\"kw-2\">&amp;</span>[<span class=\"string\">\"Jim Hawkins\"</span>, <span class=\"string\">\"John Silver\"</span>, <span class=\"string\">\"Alexander Smollett\"</span>, <span class=\"string\">\"Israel Hands\"</span>]);\n<span class=\"kw\">let </span>pirates = [<span class=\"string\">\"John Silver\"</span>, <span class=\"string\">\"Israel Hands\"</span>]; <span class=\"comment\">// too dangerous to keep them around\n</span>crew.retain(|_index, member| !pirates.contains(member));\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>crew_members = crew.iter().map(|(<span class=\"kw\">_</span>, member)| <span class=\"kw-2\">**</span>member);\n<span class=\"macro\">assert_eq!</span>(crew_members.next(), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"Jim Hawkins\"</span>));\n<span class=\"macro\">assert_eq!</span>(crew_members.next(), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"Alexander Smollett\"</span>));\n<span class=\"macro\">assert!</span>(crew_members.next().is_none());</code></pre></div>\n</div></details></div></details>",0,"typed_generational_arena::presets::U64Arena","typed_generational_arena::presets::StandardArena","typed_generational_arena::presets::SmallArena","typed_generational_arena::presets::TinyArena","typed_generational_arena::presets::TinyWrapArena","typed_generational_arena::presets::NanoArena","typed_generational_arena::presets::PicoArena","typed_generational_arena::presets::Slab"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Arena%3CT,+I,+G%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/typed_generational_arena/lib.rs.html#567-1071\">Source</a><a href=\"#impl-Arena%3CT,+I,+G%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, I: <a class=\"trait\" href=\"typed_generational_arena/trait.ArenaIndex.html\" title=\"trait typed_generational_arena::ArenaIndex\">ArenaIndex</a>, G: <a class=\"trait\" href=\"typed_generational_arena/trait.FixedGenerationalIndex.html\" title=\"trait typed_generational_arena::FixedGenerationalIndex\">FixedGenerationalIndex</a>&gt; <a class=\"struct\" href=\"typed_generational_arena/struct.Arena.html\" title=\"struct typed_generational_arena::Arena\">Arena</a>&lt;T, I, G&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"src/typed_generational_arena/lib.rs.html#578-580\">Source</a><h4 class=\"code-header\">pub fn <a href=\"typed_generational_arena/struct.Arena.html#tymethod.new\" class=\"fn\">new</a>() -&gt; <a class=\"struct\" href=\"typed_generational_arena/struct.Arena.html\" title=\"struct typed_generational_arena::Arena\">Arena</a>&lt;T, I, G&gt;</h4></section></summary><div class=\"docblock\"><p>Constructs a new, empty <code>Arena</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>typed_generational_arena::StandardArena;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>arena = StandardArena::&lt;usize&gt;::new();</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_capacity\" class=\"method\"><a class=\"src rightside\" href=\"src/typed_generational_arena/lib.rs.html#601-611\">Source</a><h4 class=\"code-header\">pub fn <a href=\"typed_generational_arena/struct.Arena.html#tymethod.with_capacity\" class=\"fn\">with_capacity</a>(n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"struct\" href=\"typed_generational_arena/struct.Arena.html\" title=\"struct typed_generational_arena::Arena\">Arena</a>&lt;T, I, G&gt;</h4></section></summary><div class=\"docblock\"><p>Constructs a new, empty <code>Arena&lt;T&gt;</code> with the specified capacity.</p>\n<p>The <code>Arena&lt;T&gt;</code> will be able to hold <code>n</code> elements without further allocation.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>typed_generational_arena::StandardArena;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>arena = StandardArena::with_capacity(<span class=\"number\">10</span>);\n\n<span class=\"comment\">// These insertions will not require further allocation.\n</span><span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..<span class=\"number\">10 </span>{\n    <span class=\"macro\">assert!</span>(arena.try_insert(i).is_ok());\n}\n\n<span class=\"comment\">// But now we are at capacity, and there is no more room.\n</span><span class=\"macro\">assert!</span>(arena.try_insert(<span class=\"number\">99</span>).is_err());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clear\" class=\"method\"><a class=\"src rightside\" href=\"src/typed_generational_arena/lib.rs.html#628-643\">Source</a><h4 class=\"code-header\">pub fn <a href=\"typed_generational_arena/struct.Arena.html#tymethod.clear\" class=\"fn\">clear</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Clear all the items inside the arena, but keep its allocation.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>typed_generational_arena::StandardArena;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>arena = StandardArena::with_capacity(<span class=\"number\">1</span>);\narena.insert(<span class=\"number\">42</span>);\narena.insert(<span class=\"number\">43</span>);\n\narena.clear();\n\n<span class=\"macro\">assert_eq!</span>(arena.capacity(), <span class=\"number\">2</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_insert\" class=\"method\"><a class=\"src rightside\" href=\"src/typed_generational_arena/lib.rs.html#672-691\">Source</a><h4 class=\"code-header\">pub fn <a href=\"typed_generational_arena/struct.Arena.html#tymethod.try_insert\" class=\"fn\">try_insert</a>(&amp;mut self, value: T) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"typed_generational_arena/struct.Index.html\" title=\"struct typed_generational_arena::Index\">Index</a>&lt;T, I, G&gt;, T&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to insert <code>value</code> into the arena using existing capacity.</p>\n<p>This method will never allocate new capacity in the arena.</p>\n<p>If insertion succeeds, then the <code>value</code>’s index is returned. If\ninsertion fails, then <code>Err(value)</code> is returned to give ownership of\n<code>value</code> back to the caller.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>typed_generational_arena::StandardArena;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>arena = StandardArena::new();\n\n<span class=\"kw\">match </span>arena.try_insert(<span class=\"number\">42</span>) {\n    <span class=\"prelude-val\">Ok</span>(idx) =&gt; {\n        <span class=\"comment\">// Insertion succeeded.\n        </span><span class=\"macro\">assert_eq!</span>(arena[idx], <span class=\"number\">42</span>);\n    }\n    <span class=\"prelude-val\">Err</span>(x) =&gt; {\n        <span class=\"comment\">// Insertion failed.\n        </span><span class=\"macro\">assert_eq!</span>(x, <span class=\"number\">42</span>);\n    }\n};</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.insert\" class=\"method\"><a class=\"src rightside\" href=\"src/typed_generational_arena/lib.rs.html#708-713\">Source</a><h4 class=\"code-header\">pub fn <a href=\"typed_generational_arena/struct.Arena.html#tymethod.insert\" class=\"fn\">insert</a>(&amp;mut self, value: T) -&gt; <a class=\"struct\" href=\"typed_generational_arena/struct.Index.html\" title=\"struct typed_generational_arena::Index\">Index</a>&lt;T, I, G&gt;</h4></section></summary><div class=\"docblock\"><p>Insert <code>value</code> into the arena, allocating more capacity if necessary.</p>\n<p>The <code>value</code>’s associated index in the arena is returned.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>typed_generational_arena::StandardArena;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>arena = StandardArena::new();\n\n<span class=\"kw\">let </span>idx = arena.insert(<span class=\"number\">42</span>);\n<span class=\"macro\">assert_eq!</span>(arena[idx], <span class=\"number\">42</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.contains\" class=\"method\"><a class=\"src rightside\" href=\"src/typed_generational_arena/lib.rs.html#740-742\">Source</a><h4 class=\"code-header\">pub fn <a href=\"typed_generational_arena/struct.Arena.html#tymethod.contains\" class=\"fn\">contains</a>(&amp;self, i: <a class=\"struct\" href=\"typed_generational_arena/struct.Index.html\" title=\"struct typed_generational_arena::Index\">Index</a>&lt;T, I, G&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Is the element at index <code>i</code> in the arena?</p>\n<p>Returns <code>true</code> if the element at <code>i</code> is in the arena, <code>false</code> otherwise.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>typed_generational_arena::StandardArena;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>arena = StandardArena::new();\n<span class=\"kw\">let </span>idx = arena.insert(<span class=\"number\">42</span>);\n\n<span class=\"macro\">assert!</span>(arena.contains(idx));\narena.remove(idx);\n<span class=\"macro\">assert!</span>(!arena.contains(idx));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get\" class=\"method\"><a class=\"src rightside\" href=\"src/typed_generational_arena/lib.rs.html#761-769\">Source</a><h4 class=\"code-header\">pub fn <a href=\"typed_generational_arena/struct.Arena.html#tymethod.get\" class=\"fn\">get</a>(&amp;self, i: <a class=\"struct\" href=\"typed_generational_arena/struct.Index.html\" title=\"struct typed_generational_arena::Index\">Index</a>&lt;T, I, G&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.reference.html\">&amp;T</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Get a shared reference to the element at index <code>i</code> if it is in the\narena.</p>\n<p>If the element at index <code>i</code> is not in the arena, then <code>None</code> is returned.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>typed_generational_arena::StandardArena;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>arena = StandardArena::new();\n<span class=\"kw\">let </span>idx = arena.insert(<span class=\"number\">42</span>);\n\n<span class=\"macro\">assert_eq!</span>(arena.get(idx), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">42</span>));\narena.remove(idx);\n<span class=\"macro\">assert!</span>(arena.get(idx).is_none());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/typed_generational_arena/lib.rs.html#788-796\">Source</a><h4 class=\"code-header\">pub fn <a href=\"typed_generational_arena/struct.Arena.html#tymethod.get_mut\" class=\"fn\">get_mut</a>(&amp;mut self, i: <a class=\"struct\" href=\"typed_generational_arena/struct.Index.html\" title=\"struct typed_generational_arena::Index\">Index</a>&lt;T, I, G&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.reference.html\">&amp;mut T</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Get an exclusive reference to the element at index <code>i</code> if it is in the\narena.</p>\n<p>If the element at index <code>i</code> is not in the arena, then <code>None</code> is returned.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>typed_generational_arena::StandardArena;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>arena = StandardArena::new();\n<span class=\"kw\">let </span>idx = arena.insert(<span class=\"number\">42</span>);\n\n<span class=\"kw-2\">*</span>arena.get_mut(idx).unwrap() += <span class=\"number\">1</span>;\n<span class=\"macro\">assert_eq!</span>(arena.remove(idx), <span class=\"prelude-val\">Some</span>(<span class=\"number\">43</span>));\n<span class=\"macro\">assert!</span>(arena.get_mut(idx).is_none());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get2_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/typed_generational_arena/lib.rs.html#827-877\">Source</a><h4 class=\"code-header\">pub fn <a href=\"typed_generational_arena/struct.Arena.html#tymethod.get2_mut\" class=\"fn\">get2_mut</a>(\n    &amp;mut self,\n    i1: <a class=\"struct\" href=\"typed_generational_arena/struct.Index.html\" title=\"struct typed_generational_arena::Index\">Index</a>&lt;T, I, G&gt;,\n    i2: <a class=\"struct\" href=\"typed_generational_arena/struct.Index.html\" title=\"struct typed_generational_arena::Index\">Index</a>&lt;T, I, G&gt;,\n) -&gt; (<a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.reference.html\">&amp;mut T</a>&gt;, <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.reference.html\">&amp;mut T</a>&gt;)</h4></section></summary><div class=\"docblock\"><p>Get a pair of exclusive references to the elements at index <code>i1</code> and <code>i2</code> if it is in the\narena.</p>\n<p>If the element at index <code>i1</code> or <code>i2</code> is not in the arena, then <code>None</code> is returned for this\nelement.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>i1</code> and <code>i2</code> are pointing to the same item of the arena.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>typed_generational_arena::StandardArena;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>arena = StandardArena::new();\n<span class=\"kw\">let </span>idx1 = arena.insert(<span class=\"number\">0</span>);\n<span class=\"kw\">let </span>idx2 = arena.insert(<span class=\"number\">1</span>);\n\n{\n    <span class=\"kw\">let </span>(item1, item2) = arena.get2_mut(idx1, idx2);\n\n    <span class=\"kw-2\">*</span>item1.unwrap() = <span class=\"number\">3</span>;\n    <span class=\"kw-2\">*</span>item2.unwrap() = <span class=\"number\">4</span>;\n}\n\n<span class=\"macro\">assert_eq!</span>(arena[idx1], <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(arena[idx2], <span class=\"number\">4</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.len\" class=\"method\"><a class=\"src rightside\" href=\"src/typed_generational_arena/lib.rs.html#900-902\">Source</a><h4 class=\"code-header\">pub fn <a href=\"typed_generational_arena/struct.Arena.html#tymethod.len\" class=\"fn\">len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Get the length of this arena.</p>\n<p>The length is the number of elements the arena holds.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>typed_generational_arena::StandardArena;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>arena = StandardArena::new();\n<span class=\"macro\">assert_eq!</span>(arena.len(), <span class=\"number\">0</span>);\n\n<span class=\"kw\">let </span>idx = arena.insert(<span class=\"number\">42</span>);\n<span class=\"macro\">assert_eq!</span>(arena.len(), <span class=\"number\">1</span>);\n\n<span class=\"kw\">let _ </span>= arena.insert(<span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(arena.len(), <span class=\"number\">2</span>);\n\n<span class=\"macro\">assert_eq!</span>(arena.remove(idx), <span class=\"prelude-val\">Some</span>(<span class=\"number\">42</span>));\n<span class=\"macro\">assert_eq!</span>(arena.len(), <span class=\"number\">1</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_empty\" class=\"method\"><a class=\"src rightside\" href=\"src/typed_generational_arena/lib.rs.html#920-922\">Source</a><h4 class=\"code-header\">pub fn <a href=\"typed_generational_arena/struct.Arena.html#tymethod.is_empty\" class=\"fn\">is_empty</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns true if the arena contains no elements</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>typed_generational_arena::StandardArena;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>arena = StandardArena::new();\n<span class=\"macro\">assert!</span>(arena.is_empty());\n\n<span class=\"kw\">let </span>idx = arena.insert(<span class=\"number\">42</span>);\n<span class=\"macro\">assert!</span>(!arena.is_empty());\n\n<span class=\"macro\">assert_eq!</span>(arena.remove(idx), <span class=\"prelude-val\">Some</span>(<span class=\"number\">42</span>));\n<span class=\"macro\">assert!</span>(arena.is_empty());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.capacity\" class=\"method\"><a class=\"src rightside\" href=\"src/typed_generational_arena/lib.rs.html#948-950\">Source</a><h4 class=\"code-header\">pub fn <a href=\"typed_generational_arena/struct.Arena.html#tymethod.capacity\" class=\"fn\">capacity</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Get the capacity of this arena.</p>\n<p>The capacity is the maximum number of elements the arena can hold\nwithout further allocation, including however many it currently\ncontains.</p>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>typed_generational_arena::StandardArena;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>arena = StandardArena::with_capacity(<span class=\"number\">10</span>);\n<span class=\"macro\">assert_eq!</span>(arena.capacity(), <span class=\"number\">10</span>);\n\n<span class=\"comment\">// `try_insert` does not allocate new capacity.\n</span><span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..<span class=\"number\">10 </span>{\n    <span class=\"macro\">assert!</span>(arena.try_insert(<span class=\"number\">1</span>).is_ok());\n    <span class=\"macro\">assert_eq!</span>(arena.capacity(), <span class=\"number\">10</span>);\n}\n\n<span class=\"comment\">// But `insert` will if the arena is already at capacity.\n</span>arena.insert(<span class=\"number\">0</span>);\n<span class=\"macro\">assert!</span>(arena.capacity() &gt; <span class=\"number\">10</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reserve\" class=\"method\"><a class=\"src rightside\" href=\"src/typed_generational_arena/lib.rs.html#968-985\">Source</a><h4 class=\"code-header\">pub fn <a href=\"typed_generational_arena/struct.Arena.html#tymethod.reserve\" class=\"fn\">reserve</a>(&amp;mut self, additional_capacity: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Allocate space for <code>additional_capacity</code> more elements in the arena.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>Panics if this causes the capacity to overflow.</p>\n<h5 id=\"examples-12\"><a class=\"doc-anchor\" href=\"#examples-12\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>typed_generational_arena::StandardArena;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>arena = StandardArena::with_capacity(<span class=\"number\">10</span>);\narena.reserve(<span class=\"number\">5</span>);\n<span class=\"macro\">assert_eq!</span>(arena.capacity(), <span class=\"number\">15</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter\" class=\"method\"><a class=\"src rightside\" href=\"src/typed_generational_arena/lib.rs.html#1007-1012\">Source</a><h4 class=\"code-header\">pub fn <a href=\"typed_generational_arena/struct.Arena.html#tymethod.iter\" class=\"fn\">iter</a>(&amp;self) -&gt; <a class=\"struct\" href=\"typed_generational_arena/struct.Iter.html\" title=\"struct typed_generational_arena::Iter\">Iter</a>&lt;'_, T, I, G&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Iter&lt;&#39;_, T, I, G&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Iterate over shared references to the elements in this arena.</p>\n<p>Yields pairs of <code>(Index&lt;T&gt;, &amp;T)</code> items.</p>\n<p>Order of iteration is not defined.</p>\n<h5 id=\"examples-13\"><a class=\"doc-anchor\" href=\"#examples-13\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>typed_generational_arena::StandardArena;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>arena = StandardArena::new();\n<span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..<span class=\"number\">10 </span>{\n    arena.insert(i * i);\n}\n\n<span class=\"kw\">for </span>(idx, value) <span class=\"kw\">in </span>arena.iter() {\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{} is at index {:?}\"</span>, value, idx);\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/typed_generational_arena/lib.rs.html#1034-1039\">Source</a><h4 class=\"code-header\">pub fn <a href=\"typed_generational_arena/struct.Arena.html#tymethod.iter_mut\" class=\"fn\">iter_mut</a>(&amp;mut self) -&gt; <a class=\"struct\" href=\"typed_generational_arena/struct.IterMut.html\" title=\"struct typed_generational_arena::IterMut\">IterMut</a>&lt;'_, T, I, G&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"IterMut&lt;&#39;_, T, I, G&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Iterate over exclusive references to the elements in this arena.</p>\n<p>Yields pairs of <code>(Index&lt;T&gt;, &amp;mut T)</code> items.</p>\n<p>Order of iteration is not defined.</p>\n<h5 id=\"examples-14\"><a class=\"doc-anchor\" href=\"#examples-14\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>typed_generational_arena::StandardArena;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>arena = StandardArena::new();\n<span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..<span class=\"number\">10 </span>{\n    arena.insert(i * i);\n}\n\n<span class=\"kw\">for </span>(_idx, value) <span class=\"kw\">in </span>arena.iter_mut() {\n    <span class=\"kw-2\">*</span>value += <span class=\"number\">5</span>;\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.drain\" class=\"method\"><a class=\"src rightside\" href=\"src/typed_generational_arena/lib.rs.html#1066-1070\">Source</a><h4 class=\"code-header\">pub fn <a href=\"typed_generational_arena/struct.Arena.html#tymethod.drain\" class=\"fn\">drain</a>(&amp;mut self) -&gt; <a class=\"struct\" href=\"typed_generational_arena/struct.Drain.html\" title=\"struct typed_generational_arena::Drain\">Drain</a>&lt;'_, T, I, G&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Drain&lt;&#39;_, T, I, G&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Iterate over elements of the arena and remove them.</p>\n<p>Yields pairs of <code>(Index&lt;T&gt;, T)</code> items.</p>\n<p>Order of iteration is not defined.</p>\n<p>Note: All elements are removed even if the iterator is only partially consumed or not consumed at all.</p>\n<h5 id=\"examples-15\"><a class=\"doc-anchor\" href=\"#examples-15\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>typed_generational_arena::StandardArena;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>arena = StandardArena::new();\n<span class=\"kw\">let </span>idx_1 = arena.insert(<span class=\"string\">\"hello\"</span>);\n<span class=\"kw\">let </span>idx_2 = arena.insert(<span class=\"string\">\"world\"</span>);\n\n<span class=\"macro\">assert!</span>(arena.get(idx_1).is_some());\n<span class=\"macro\">assert!</span>(arena.get(idx_2).is_some());\n<span class=\"kw\">for </span>(idx, value) <span class=\"kw\">in </span>arena.drain() {\n    <span class=\"macro\">assert!</span>((idx == idx_1 &amp;&amp; value == <span class=\"string\">\"hello\"</span>) || (idx == idx_2 &amp;&amp; value == <span class=\"string\">\"world\"</span>));\n}\n<span class=\"macro\">assert!</span>(arena.get(idx_1).is_none());\n<span class=\"macro\">assert!</span>(arena.get(idx_2).is_none());</code></pre></div>\n</div></details></div></details>",0,"typed_generational_arena::presets::U64Arena","typed_generational_arena::presets::StandardArena","typed_generational_arena::presets::SmallArena","typed_generational_arena::presets::TinyArena","typed_generational_arena::presets::TinyWrapArena","typed_generational_arena::presets::NanoArena","typed_generational_arena::presets::PicoArena","typed_generational_arena::presets::Slab"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-Arena%3CT,+I,+G%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/typed_generational_arena/lib.rs.html#408\">Source</a><a href=\"#impl-Clone-for-Arena%3CT,+I,+G%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>, I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>, G: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"typed_generational_arena/struct.Arena.html\" title=\"struct typed_generational_arena::Arena\">Arena</a>&lt;T, I, G&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/typed_generational_arena/lib.rs.html#408\">Source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"typed_generational_arena/struct.Arena.html\" title=\"struct typed_generational_arena::Arena\">Arena</a>&lt;T, I, G&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/1.85.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.0/src/core/clone.rs.html#174\">Source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Self)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.85.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","typed_generational_arena::presets::U64Arena","typed_generational_arena::presets::StandardArena","typed_generational_arena::presets::SmallArena","typed_generational_arena::presets::TinyArena","typed_generational_arena::presets::TinyWrapArena","typed_generational_arena::presets::NanoArena","typed_generational_arena::presets::PicoArena","typed_generational_arena::presets::Slab"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Arena%3CT,+I,+G%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/typed_generational_arena/lib.rs.html#408\">Source</a><a href=\"#impl-Debug-for-Arena%3CT,+I,+G%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>, I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>, G: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"typed_generational_arena/struct.Arena.html\" title=\"struct typed_generational_arena::Arena\">Arena</a>&lt;T, I, G&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/typed_generational_arena/lib.rs.html#408\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/1.85.0/core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.85.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","typed_generational_arena::presets::U64Arena","typed_generational_arena::presets::StandardArena","typed_generational_arena::presets::SmallArena","typed_generational_arena::presets::TinyArena","typed_generational_arena::presets::TinyWrapArena","typed_generational_arena::presets::NanoArena","typed_generational_arena::presets::PicoArena","typed_generational_arena::presets::Slab"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Extend%3CT%3E-for-Arena%3CT,+Idx,+G%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/typed_generational_arena/lib.rs.html#1497-1503\">Source</a><a href=\"#impl-Extend%3CT%3E-for-Arena%3CT,+Idx,+G%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, Idx: <a class=\"trait\" href=\"typed_generational_arena/trait.ArenaIndex.html\" title=\"trait typed_generational_arena::ArenaIndex\">ArenaIndex</a>, G: <a class=\"trait\" href=\"typed_generational_arena/trait.FixedGenerationalIndex.html\" title=\"trait typed_generational_arena::FixedGenerationalIndex\">FixedGenerationalIndex</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/iter/traits/collect/trait.Extend.html\" title=\"trait core::iter::traits::collect::Extend\">Extend</a>&lt;T&gt; for <a class=\"struct\" href=\"typed_generational_arena/struct.Arena.html\" title=\"struct typed_generational_arena::Arena\">Arena</a>&lt;T, Idx, G&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/typed_generational_arena/lib.rs.html#1498-1502\">Source</a><a href=\"#method.extend\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.0/core/iter/traits/collect/trait.Extend.html#tymethod.extend\" class=\"fn\">extend</a>&lt;I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = T&gt;&gt;(&amp;mut self, iter: I)</h4></section></summary><div class='docblock'>Extends a collection with the contents of an iterator. <a href=\"https://doc.rust-lang.org/1.85.0/core/iter/traits/collect/trait.Extend.html#tymethod.extend\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.0/src/core/iter/traits/collect.rs.html#420\">Source</a><a href=\"#method.extend_one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.0/core/iter/traits/collect/trait.Extend.html#method.extend_one\" class=\"fn\">extend_one</a>(&amp;mut self, item: A)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_reserve\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.0/src/core/iter/traits/collect.rs.html#428\">Source</a><a href=\"#method.extend_reserve\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\" class=\"fn\">extend_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Reserves capacity in a collection for the given number of additional elements. <a href=\"https://doc.rust-lang.org/1.85.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\">Read more</a></div></details></div></details>","Extend<T>","typed_generational_arena::presets::U64Arena","typed_generational_arena::presets::StandardArena","typed_generational_arena::presets::SmallArena","typed_generational_arena::presets::TinyArena","typed_generational_arena::presets::TinyWrapArena","typed_generational_arena::presets::NanoArena","typed_generational_arena::presets::PicoArena","typed_generational_arena::presets::Slab"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromIterator%3CT%3E-for-Arena%3CT,+Idx,+G%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/typed_generational_arena/lib.rs.html#1505-1515\">Source</a><a href=\"#impl-FromIterator%3CT%3E-for-Arena%3CT,+Idx,+G%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, Idx: <a class=\"trait\" href=\"typed_generational_arena/trait.ArenaIndex.html\" title=\"trait typed_generational_arena::ArenaIndex\">ArenaIndex</a>, G: <a class=\"trait\" href=\"typed_generational_arena/trait.FixedGenerationalIndex.html\" title=\"trait typed_generational_arena::FixedGenerationalIndex\">FixedGenerationalIndex</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;T&gt; for <a class=\"struct\" href=\"typed_generational_arena/struct.Arena.html\" title=\"struct typed_generational_arena::Arena\">Arena</a>&lt;T, Idx, G&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/typed_generational_arena/lib.rs.html#1506-1514\">Source</a><a href=\"#method.from_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.0/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = T&gt;&gt;(iter: I) -&gt; Self</h4></section></summary><div class='docblock'>Creates a value from an iterator. <a href=\"https://doc.rust-lang.org/1.85.0/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\">Read more</a></div></details></div></details>","FromIterator<T>","typed_generational_arena::presets::U64Arena","typed_generational_arena::presets::StandardArena","typed_generational_arena::presets::SmallArena","typed_generational_arena::presets::TinyArena","typed_generational_arena::presets::TinyWrapArena","typed_generational_arena::presets::NanoArena","typed_generational_arena::presets::PicoArena","typed_generational_arena::presets::Slab"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Index%3CIndex%3CT,+I,+G%3E%3E-for-Arena%3CT,+I,+G%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/typed_generational_arena/lib.rs.html#1517-1523\">Source</a><a href=\"#impl-Index%3CIndex%3CT,+I,+G%3E%3E-for-Arena%3CT,+I,+G%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, I: <a class=\"trait\" href=\"typed_generational_arena/trait.ArenaIndex.html\" title=\"trait typed_generational_arena::ArenaIndex\">ArenaIndex</a>, G: <a class=\"trait\" href=\"typed_generational_arena/trait.FixedGenerationalIndex.html\" title=\"trait typed_generational_arena::FixedGenerationalIndex\">FixedGenerationalIndex</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;<a class=\"struct\" href=\"typed_generational_arena/struct.Index.html\" title=\"struct typed_generational_arena::Index\">Index</a>&lt;T, I, G&gt;&gt; for <a class=\"struct\" href=\"typed_generational_arena/struct.Arena.html\" title=\"struct typed_generational_arena::Arena\">Arena</a>&lt;T, I, G&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/typed_generational_arena/lib.rs.html#1518\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.0/core/ops/index/trait.Index.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = T</h4></section></summary><div class='docblock'>The returned type after indexing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.index\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/typed_generational_arena/lib.rs.html#1520-1522\">Source</a><a href=\"#method.index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.0/core/ops/index/trait.Index.html#tymethod.index\" class=\"fn\">index</a>(&amp;self, index: <a class=\"struct\" href=\"typed_generational_arena/struct.Index.html\" title=\"struct typed_generational_arena::Index\">Index</a>&lt;T, I, G&gt;) -&gt; &amp;Self::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.0/core/ops/index/trait.Index.html#associatedtype.Output\" title=\"type core::ops::index::Index::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/1.85.0/core/ops/index/trait.Index.html#tymethod.index\">Read more</a></div></details></div></details>","Index<Index<T, I, G>>","typed_generational_arena::presets::U64Arena","typed_generational_arena::presets::StandardArena","typed_generational_arena::presets::SmallArena","typed_generational_arena::presets::TinyArena","typed_generational_arena::presets::TinyWrapArena","typed_generational_arena::presets::NanoArena","typed_generational_arena::presets::PicoArena","typed_generational_arena::presets::Slab"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IndexMut%3CIndex%3CT,+I,+G%3E%3E-for-Arena%3CT,+I,+G%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/typed_generational_arena/lib.rs.html#1525-1529\">Source</a><a href=\"#impl-IndexMut%3CIndex%3CT,+I,+G%3E%3E-for-Arena%3CT,+I,+G%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, I: <a class=\"trait\" href=\"typed_generational_arena/trait.ArenaIndex.html\" title=\"trait typed_generational_arena::ArenaIndex\">ArenaIndex</a>, G: <a class=\"trait\" href=\"typed_generational_arena/trait.FixedGenerationalIndex.html\" title=\"trait typed_generational_arena::FixedGenerationalIndex\">FixedGenerationalIndex</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/ops/index/trait.IndexMut.html\" title=\"trait core::ops::index::IndexMut\">IndexMut</a>&lt;<a class=\"struct\" href=\"typed_generational_arena/struct.Index.html\" title=\"struct typed_generational_arena::Index\">Index</a>&lt;T, I, G&gt;&gt; for <a class=\"struct\" href=\"typed_generational_arena/struct.Arena.html\" title=\"struct typed_generational_arena::Arena\">Arena</a>&lt;T, I, G&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.index_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/typed_generational_arena/lib.rs.html#1526-1528\">Source</a><a href=\"#method.index_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.0/core/ops/index/trait.IndexMut.html#tymethod.index_mut\" class=\"fn\">index_mut</a>(&amp;mut self, index: <a class=\"struct\" href=\"typed_generational_arena/struct.Index.html\" title=\"struct typed_generational_arena::Index\">Index</a>&lt;T, I, G&gt;) -&gt; &amp;mut Self::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.0/core/ops/index/trait.Index.html#associatedtype.Output\" title=\"type core::ops::index::Index::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the mutable indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/1.85.0/core/ops/index/trait.IndexMut.html#tymethod.index_mut\">Read more</a></div></details></div></details>","IndexMut<Index<T, I, G>>","typed_generational_arena::presets::U64Arena","typed_generational_arena::presets::StandardArena","typed_generational_arena::presets::SmallArena","typed_generational_arena::presets::TinyArena","typed_generational_arena::presets::TinyWrapArena","typed_generational_arena::presets::NanoArena","typed_generational_arena::presets::PicoArena","typed_generational_arena::presets::Slab"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoIterator-for-Arena%3CT,+I,+G%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/typed_generational_arena/lib.rs.html#1158-1167\">Source</a><a href=\"#impl-IntoIterator-for-Arena%3CT,+I,+G%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, I: <a class=\"trait\" href=\"typed_generational_arena/trait.ArenaIndex.html\" title=\"trait typed_generational_arena::ArenaIndex\">ArenaIndex</a>, G: <a class=\"trait\" href=\"typed_generational_arena/trait.FixedGenerationalIndex.html\" title=\"trait typed_generational_arena::FixedGenerationalIndex\">FixedGenerationalIndex</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a> for <a class=\"struct\" href=\"typed_generational_arena/struct.Arena.html\" title=\"struct typed_generational_arena::Arena\">Arena</a>&lt;T, I, G&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/typed_generational_arena/lib.rs.html#1159\">Source</a><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = T</h4></section></summary><div class='docblock'>The type of the elements being iterated over.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.IntoIter\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/typed_generational_arena/lib.rs.html#1160\">Source</a><a href=\"#associatedtype.IntoIter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" class=\"associatedtype\">IntoIter</a> = <a class=\"struct\" href=\"typed_generational_arena/struct.IntoIter.html\" title=\"struct typed_generational_arena::IntoIter\">IntoIter</a>&lt;T, I, G&gt;</h4></section></summary><div class='docblock'>Which kind of iterator are we turning this into?</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/typed_generational_arena/lib.rs.html#1161-1166\">Source</a><a href=\"#method.into_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.0/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\" class=\"fn\">into_iter</a>(self) -&gt; Self::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" title=\"type core::iter::traits::collect::IntoIterator::IntoIter\">IntoIter</a></h4></section></summary><div class='docblock'>Creates an iterator from a value. <a href=\"https://doc.rust-lang.org/1.85.0/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\">Read more</a></div></details></div></details>","IntoIterator","typed_generational_arena::presets::U64Arena","typed_generational_arena::presets::StandardArena","typed_generational_arena::presets::SmallArena","typed_generational_arena::presets::TinyArena","typed_generational_arena::presets::TinyWrapArena","typed_generational_arena::presets::NanoArena","typed_generational_arena::presets::PicoArena","typed_generational_arena::presets::Slab"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[53645]}