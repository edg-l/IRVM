searchState.loadedDescShard("typed_generational_arena", 0, "  \nThe <code>Arena</code> allows inserting and removing elements that are …\nA type which can be used as an index to an arena\nIf this is used as a generational index, then the arena is …\nAn iterator that removes elements from the arena.\nA type which can be used as the index of a generation …\nA type which can be used as the index of a generation, …\nIf this is used as a generational index, then the arena …\nA marker trait which says that a generation type is ignored\nAn index (and generation) into an <code>Arena</code>.\nAn iterator over the elements in an arena.\nAn iterator over shared references to the elements in an …\nAn iterator over exclusive references to elements in this …\nAn arena which can only hold up to (2^{8}) elements, but …\nA typed index into a <code>NanoArena</code>\nAn arena index which is always nonzero. Useful for Option …\nA generation counter which is always nonzero. Useful for …\nA wrapping generation counter which is always nonzero. …\nAn arena which can only hold up to (2^{8} - 1) elements, …\nA typed index into a <code>NanoArena</code>\nA slab arena which can hold up to <code>std::usize::MAX - 1</code> …\nAn index into a <code>PtrSlab&lt;T&gt;</code>\nA slab arena with a given index, which does <em>not</em> support …\nAn index into a slab of type <code>T</code> by a certain type\nAn arena which can only hold up to (2^{32} - 1) elements …\nA typed index into a <code>StandardArena</code>\nA slab arena which can hold up to <code>2^{32} - 1</code> elements but …\nAn index into a <code>SmallPtrSlab&lt;T&gt;</code>\nA slab arena which can hold up to <code>2^{32}</code> elements but does …\nAn index into a <code>SmallSlab&lt;T&gt;</code>\nA standard arena of <code>T</code> indexed by <code>usize</code>, with <code>2^{64} - 1</code> …\nA typed index into a <code>StandardArena</code>\nA standard slab arena which can hold up to <code>std::usize::MAX</code> …\nAn index into a <code>Slab&lt;T&gt;</code>\nAn arena which can only hold up to (2^{16}) elements and …\nA typed index into a <code>StandardArena</code>\nAn arena which can only hold up to (2^{16}) elements, but …\nA typed index into a <code>TinyWrapArena</code>\nAn arena of <code>T</code> indexed by <code>usize</code>, with <code>2^{64}</code> generations\nAn index into a <code>U64Arena</code>\nGet this index’s array index into the arena\nGet the capacity of this arena.\nClear all the items inside the arena, but keep its …\nIs the element at index <code>i</code> in the arena?\nIterate over elements of the arena and remove them.\nGet an object representing the first possible generation\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate an arena index from a usize\nConvert a <code>usize</code> to an index (with generations ignored)\nConvert a <code>usize</code> to an index at the first generation\nGet this index’s generation\nCompare this generation with another.\nGet a shared reference to the element at index <code>i</code> if it is …\nGet a pair of exclusive references to the elements at …\nGet an exclusive reference to the element at index <code>i</code> if it …\nIncrement the generation of this object. May wrap or panic …\nInsert <code>value</code> into the arena, allocating more capacity if …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the arena contains no elements\nIterate over shared references to the elements in this …\nIterate over exclusive references to the elements in this …\nGet the length of this arena.\nCreate a new index from a given array index and generation\nConstructs a new, empty <code>Arena</code>.\nRemove the element at index <code>i</code> from the arena.\nAllocate space for <code>additional_capacity</code> more elements in …\nRetains only the elements specified by the predicate.\nTransform an arena index into a usize\nGet this index as a <code>usize</code>\nAttempts to insert <code>value</code> into the arena using existing …\nConstructs a new, empty <code>Arena&lt;T&gt;</code> with the specified …")